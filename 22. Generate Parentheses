class Solution {
public:
    void backtrack(int open, int close, int n, string st, vector<string> &res) {
        if(open == n && close == n) {
            res.push_back(st);
            return;
        }
        
        if(open < n) backtrack(open+1, close, n, st+'(', res);
        
        if(close < open) backtrack(open, close+1, n, st+')', res);
    }
    
    vector<string> generateParenthesis(int n) {
        int open = 0;
        int close = 0;
        
        string st;
        vector<string> res; 
        
        backtrack(open, close, n, st, res);
        return res;
    }
};
